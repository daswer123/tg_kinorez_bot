import asyncio
import logging
import os
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.types import DocumentAttributeVideo
from telethon.errors import MessageIdInvalidError, MessageNotModifiedError
import instructor
from openai import OpenAI
from pydantic import BaseModel
from typing import List, Dict, Set
from dotenv import load_dotenv
import time

import sqlite3

from funcs import get_video_by_url_and_timings
from auth_db import AuthDB
from config import AUTH_PASSWORD, AUTH_ENABLED, ADMIN_ID

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv_path = os.path.join(os.path.dirname(__file__), '.env.template')
load_dotenv(dotenv_path)

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Define Pydantic model for structured output from LLM
class YoutubeVideo(BaseModel):
    url: str
    start_time: str
    end_time: str
    correct_timings: bool
    error_details: str = ""

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telethon –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
PHONE = os.getenv("PHONE")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
if not API_ID or not API_HASH or not PHONE:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API_ID, API_HASH –∏ PHONE –≤ —Ñ–∞–π–ª–µ .env")

# OpenRouter –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OPENROUTER_API_KEY = "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"

BASE_URL = "https://openrouter.ai/api/v1"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∫–ª–∏–µ–Ω—Ç–∞
client = instructor.from_openai(
    OpenAI(base_url=BASE_URL, api_key=OPENROUTER_API_KEY),
    mode=instructor.Mode.JSON
)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
DOWNLOAD_DIR = os.path.join(os.path.dirname(__file__), "temp_videos")
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
auth_db = AuthDB(os.path.join(os.path.dirname(__file__), "users.db"))

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Telethon
tg_client = TelegramClient('user_session', API_ID, API_HASH)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
waiting_for_password: Set[int] = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_edit_message(message, text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏"""
    try:
        if message:
            return await message.edit(text=text)
    except (MessageIdInvalidError, MessageNotModifiedError) as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        try:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await tg_client.send_message(message.chat_id, text)
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(send_error)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM
def extract_video_data(text):
    """Extract structured data from text using LLM"""
    try:
        response = client.chat.completions.create(
            model="google/gemini-2.0-flash-001",
            response_model=List[YoutubeVideo],
            messages=[
                {
                    "role": "user", 
                    "content": f"–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {text} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å—Ç—É—é —Å—Å—ã–ª–∫—É, "
                              "–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞. –ü—Ä–æ—Å—Ç–æ –∏–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. "
                              "–í—Ä–µ–º—è –∏–∑–≤–ª–µ–∫–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00:00 –±–µ–∑ –º–∏–ª–∏—Å–µ–∫—É–Ω–¥. "
                              "–ï—Å–ª–∏ —Ç–∞–π–º–∏–Ω–≥–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, –≤–µ—Ä–Ω–∏ correct_timings=False –∏ "
                              "–¥–æ–±–∞–≤—å –ø–æ–ª–µ error_details —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ', "
                              "'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏', '–¢–∞–π–º–∏–Ω–≥–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ' –∏ —Ç.–¥."
                }
            ],
        )
        return response
    except Exception as e:
        logger.error(f"Error extracting video data: {e}")
        return None

# Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@tg_client.on(events.NewMessage)
async def auth_middleware(event):
    """
    Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not AUTH_ENABLED:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sender = await event.get_sender()
    user_id = sender.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if auth_db.is_user_authorized(user_id):
        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    if user_id in waiting_for_password:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å
        password_attempt = event.message.text
        
        if password_attempt == AUTH_PASSWORD:
            # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            auth_db.add_or_update_user(
                user_id, 
                sender.username, 
                sender.first_name, 
                sender.last_name, 
                is_authorized=True
            )
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            waiting_for_password.remove(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await event.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
            await event.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        raise events.StopPropagation
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É
        auth_db.add_or_update_user(
            user_id, 
            sender.username, 
            sender.first_name, 
            sender.last_name, 
            is_authorized=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        waiting_for_password.add(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
        await event.reply("üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        
        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        raise events.StopPropagation

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@tg_client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    sender = await event.get_sender()
    user_id = sender.id
    
    if AUTH_ENABLED and not auth_db.is_user_authorized(user_id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_db.add_or_update_user(
            user_id, 
            sender.username, 
            sender.first_name, 
            sender.last_name, 
            is_authorized=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        waiting_for_password.add(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
        await event.reply("üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await event.respond(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏ —Ç–∞–π–º–∫–æ–¥—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ https://www.youtube.com/watch?v=dQw4w9WgXcQ —Å 1:30 –¥–æ 2:00\n"
        "‚Ä¢ –í—ã—Ä–µ–∂–∏ —Å 45 —Å–µ–∫—É–Ω–¥—ã –ø–æ 1:15 https://youtu.be/dQw4w9WgXcQ\n"
        "‚Ä¢ https://www.youtube.com/watch?v=dQw4w9WgXcQ 00:20 - 00:45"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@tg_client.on(events.NewMessage(pattern='^/users$'))
async def users_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    sender = await event.get_sender()
    user_id = sender.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    if user_id == ADMIN_ID:
        users = auth_db.get_all_users()
        
        if not users:
            await event.respond("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        message = "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        
        for user in users:
            user_id, username, first_name, last_name, is_authorized, created_at = user
            
            status = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" if is_authorized else "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            name = f"{first_name or ''} {last_name or ''}".strip()
            username_str = f"@{username}" if username else "–Ω–µ—Ç"
            
            message += f"ID: {user_id}\n"
            message += f"–ò–º—è: {name or '–Ω–µ—Ç'}\n"
            message += f"Username: {username_str}\n"
            message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n\n"
        
        await event.respond(message)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@tg_client.on(events.NewMessage(pattern='/stats'))
async def stats_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    sender = await event.get_sender()
    user_id = sender.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id == ADMIN_ID:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = auth_db.get_total_statistics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message = "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞**\n\n"
        
        message += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        message += f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['authorized_users']}\n\n"
        
        message += f"üîÑ **–ó–∞–ø—Ä–æ—Å—ã:**\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
        message += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['completed_requests']}\n"
        message += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {stats['error_requests']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        if stats['recent_requests']:
            message += f"üìÖ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã (–∑–∞ 7 –¥–Ω–µ–π):**\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –¥–∞—Ç–µ
            requests_by_date = {}
            for req in stats['recent_requests']:
                date = req['created_at'].split()[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                if date not in requests_by_date:
                    requests_by_date[date] = []
                requests_by_date[date].append(req)
            
            # –í—ã–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –¥–Ω—è–º
            for date in sorted(requests_by_date.keys(), reverse=True):
                message += f"\nüìÜ **{date}**:\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                day_requests = requests_by_date[date]
                for i, req in enumerate(day_requests[:5], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –¥–µ–Ω—å
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    name = f"{req['first_name'] or ''} {req['last_name'] or ''}".strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    username = f"@{req['username']}" if req['username'] else ""
                    user_info = f"{name} {username}" if name or username else f"ID: {req['user_id']}"
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                    status_emoji = "‚úÖ" if req['status'] == 'completed' else "‚ùå" if req['status'] == 'error' else "‚è≥"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
                    request_text = req['request_text']
                    if len(request_text) > 50:
                        request_text = request_text[:47] + "..."
                    
                    
                    # –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
                    time = req['created_at'].split()[1].split('.')[0]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
                    message += f"{i}. {status_emoji} {time} - {user_info}: {request_text}\n"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    videos = auth_db.get_request_videos(req['id'])
                    
                    if videos:
                        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∏–¥–µ–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                        videos_to_show = videos[:2]
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–æ–º
                        for j, video in enumerate(videos_to_show, 1):
                            video_url = video['video_url'] or "–ù–µ—Ç URL"
                            # –°–æ–∫—Ä–∞—â–∞–µ–º URL, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                            if len(video_url) > 25:
                                video_url = video_url[:22] + "..."
                            
                            timings = ""
                            if video['start_time'] and video['end_time']:
                                timings = f" ({video['start_time']}-{video['end_time']})"
                            
                            message += f"   ‚Ä¢ {video_url}{timings}\n"
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–∏–¥–µ–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        if len(videos) > len(videos_to_show):
                            message += f"   ‚Ä¢ ...–∏ –µ—â–µ {len(videos) - len(videos_to_show)} –≤–∏–¥–µ–æ\n"
                
                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ 5, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å
                if len(day_requests) > 5:
                    message += f"...–∏ –µ—â–µ {len(day_requests) - 5} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å\n"
        
        await event.respond(message)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /userstats (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
@tg_client.on(events.NewMessage(pattern='/userstats(?:\s+(\d+))?'))
async def userstats_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /userstats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    sender = await event.get_sender()
    sender_id = sender.id
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    match = event.pattern_match.group(1)
    target_user_id = int(match) if match else sender_id
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if target_user_id != sender_id and sender_id != ADMIN_ID:
        await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_requests = auth_db.get_user_statistics(target_user_id)
    
    if not user_requests:
        await event.respond(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = user_requests[0]
    name = f"{user_info['first_name'] or ''} {user_info['last_name'] or ''}".strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    username = f"@{user_info['username']}" if user_info['username'] else ""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} {username} (ID: {target_user_id})**\n\n"
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    total_count = sum(1 for r in user_requests if r['status'] == 'completed' or r['status'] == 'error')
    completed_count = sum(1 for r in user_requests if r['status'] == 'completed')
    error_count = sum(1 for r in user_requests if r['status'] == 'error')
    
    message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_count}\n"
    message += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {completed_count}\n"
    message += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {error_count}\n\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
    message += "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**\n"
    
    shown_requests = 0
    for i, req in enumerate(user_requests, 1):
        if shown_requests >= 10:
            break
            
        status_emoji = "‚úÖ" if req['status'] == 'completed' else "‚ùå" if req['status'] == 'error' else "‚è≥"
        req_date = req['created_at'].split('.')[0]  # –£–¥–∞–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        request_text = req['request_text']
        if len(request_text) > 40:
            request_text = request_text[:37] + "..."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        message += f"{shown_requests + 1}. {status_emoji} {req_date} - {request_text}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        videos = auth_db.get_request_videos(req['id'])
        
        if videos:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for j, video in enumerate(videos, 1):
                video_url = video['video_url'] or "–ù–µ—Ç URL"
                # –°–æ–∫—Ä–∞—â–∞–µ–º URL, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if len(video_url) > 30:
                    video_url = video_url[:27] + "..."
                
                timings = ""
                if video['start_time'] and video['end_time']:
                    timings = f" ({video['start_time']} - {video['end_time']})"
                
                video_status = "‚úÖ" if video['status'] == 'completed' else "‚ùå" if video['status'] == 'error' else "‚è≥"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Å –æ—Ç—Å—Ç—É–ø–æ–º
                message += f"   {video_status} –í–∏–¥–µ–æ {j}: {video_url}{timings}\n"
        else:
            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –∑–∞–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            message += f"   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ\n"
        
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        shown_requests += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        message += "\n"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∑–∞–ø—Ä–æ—Å—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if len(user_requests) > shown_requests:
        message += f"...–∏ –µ—â–µ {len(user_requests) - shown_requests} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    
    await event.respond(message)

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@tg_client.on(events.NewMessage)
async def message_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if event.message.text.startswith('/'):
        return
    
    user_text = event.message.text
    sender = await event.get_sender()
    user_id = sender.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    request_id = auth_db.log_request(user_id, user_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    processing_message = await event.respond("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é LLM
        response = extract_video_data(user_text)
        
        if not response:
            await safe_edit_message(
                processing_message,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ —Ç–∞–π–º–∫–æ–¥—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if request_id:
                auth_db.update_request_status(request_id, "error")
            
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç–µ
        for video in response:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            video_request_id = None
            if request_id:
                video_request_id = auth_db.log_video_request(
                    request_id,
                    video.url,
                    video.start_time,
                    video.end_time,
                    "processing"
                )
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π ID –∑–∞–ø—Ä–æ—Å–∞
            current_request_id = video_request_id or request_id
            
            status_text = (
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n"
                f"‚Ä¢ –í–∏–¥–µ–æ: {video.url}\n"
                f"‚Ä¢ –ù–∞—á–∞–ª–æ: {video.start_time}\n"
                f"‚Ä¢ –ö–æ–Ω–µ—Ü: {video.end_time}\n"
            )
            
            if not video.correct_timings:
                error_message = "–¢–∞–π–º–∫–æ–¥—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
                if hasattr(video, 'error_details') and video.error_details:
                    error_message += f": {video.error_details}"
                
                await safe_edit_message(
                    processing_message,
                    f"{status_text}\n‚ùå {error_message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if current_request_id:
                    auth_db.update_request_status(current_request_id, "error")
                
                continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_message = await safe_edit_message(
                processing_message,
                f"{status_text}\n‚è≥ –°–∫–∞—á–∏–≤–∞—é –∏ –æ–±—Ä–µ–∑–∞—é –≤–∏–¥–µ–æ..."
            )
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if status_message:
                processing_message = status_message
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                result = get_video_by_url_and_timings(
                    video.url, 
                    video.start_time, 
                    video.end_time, 
                    DOWNLOAD_DIR
                )
                
                if not result:
                    await safe_edit_message(
                        processing_message,
                        f"{status_text}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    if current_request_id:
                        auth_db.update_request_status(current_request_id, "error")
                    
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏
                video_file_path = result.get('file_path')
                
                if not video_file_path or not os.path.exists(video_file_path):
                    logger.error(f"File does not exist: {video_file_path}")
                    await safe_edit_message(
                        processing_message,
                        f"{status_text}\n‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω."
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    if current_request_id:
                        auth_db.update_request_status(current_request_id, "error")
                    
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(video_file_path)
                logger.info(f"File size: {file_size} bytes")
                
                # Telethon –∏–º–µ–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å Bot API
                if file_size > 2 * 1024 * 1024 * 1024:  # 2 GB - –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è Telethon
                    await safe_edit_message(
                        processing_message,
                        f"{status_text}\n‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (>2GB)."
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    if current_request_id:
                        auth_db.update_request_status(current_request_id, "error")
                    
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
                    duration = result.get('segment_duration', 0)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –≤–∏–¥–µ–æ
                    max_resolution = result.get('max_resolution', 0)
                    resolution_info = ""
                    
                    source = result.get('source', 'YouTube')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    source_name = source
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∏–∂–µ 1080p
                    if max_resolution and max_resolution < 1080:
                        resolution_info = f"\n‚ö†Ô∏è –í–∏–¥–µ–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ \"{source_name}\" –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –Ω–∏–∑–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ ({max_resolution}p)"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
                    await tg_client.send_file(
                        event.chat_id,
                        video_file_path,
                        caption=f"–§—Ä–∞–≥–º–µ–Ω—Ç: {video.start_time} - {video.end_time}{resolution_info}",
                        attributes=[
                            DocumentAttributeVideo(
                                duration=int(duration),
                                w=1280,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                                h=720,   # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                                supports_streaming=True
                            )
                        ],
                        progress_callback=lambda current, total: logger.info(f"Upload progress: {current}/{total}")
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    if current_request_id:
                        auth_db.update_request_status(current_request_id, "completed")
                        
                except Exception as video_error:
                    logger.error(f"Error sending as video: {video_error}")
                    
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                    try:
                        await tg_client.send_file(
                            event.chat_id,
                            video_file_path,
                            caption=f"–§—Ä–∞–≥–º–µ–Ω—Ç: {video.start_time} - {video.end_time} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª){resolution_info}",
                            force_document=True
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        if current_request_id:
                            auth_db.update_request_status(current_request_id, "completed")
                            
                    except Exception as doc_error:
                        logger.error(f"Error sending as document: {doc_error}")
                        await safe_edit_message(
                            processing_message,
                            f"{status_text}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {str(doc_error)}"
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        if current_request_id:
                            auth_db.update_request_status(current_request_id, "error")
                            
                        continue
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–µ–ª–∞–µ–º —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                try:
                    await processing_message.delete()
                except Exception as del_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(del_error)}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(video_file_path)
                    logger.info(f"Removed file: {video_file_path}")
                except Exception as remove_error:
                    logger.error(f"Error removing file: {remove_error}")
                    
            except Exception as e:
                logger.error(f"Error processing video: {e}")
                await safe_edit_message(
                    processing_message,
                    f"{status_text}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if current_request_id:
                    auth_db.update_request_status(current_request_id, "error")
                
    except Exception as e:
        logger.error(f"Error in message handler: {e}")
        await safe_edit_message(
            processing_message,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if request_id:
            auth_db.update_request_status(request_id, "error")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("Starting Telethon client...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    await tg_client.start(phone=PHONE)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
    me = await tg_client.get_me()
    logger.info(f"Client started successfully as {me.first_name} (@{me.username})")
    
    # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if AUTH_ENABLED:
        logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞. –ü–∞—Ä–æ–ª—å: {AUTH_PASSWORD}")
    else:
        logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    try:
        logger.info("Client is now running. Press Ctrl+C to stop.")
        await tg_client.run_until_disconnected()
    finally:
        await tg_client.disconnect()
        logger.info("Client disconnected")

if __name__ == "__main__":
    asyncio.run(main()) 