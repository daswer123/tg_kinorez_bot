import cv2
import os
import numpy as np
import subprocess
import shutil
import time
import re

def check_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ FFmpeg –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH."""
    if shutil.which("ffmpeg"):
        print("FFmpeg –Ω–∞–π–¥–µ–Ω.")
        return True
    else:
        print("–û—à–∏–±–∫–∞: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.")
        print("–°–∫–∞—á–∞—Ç—å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://ffmpeg.org/download.html")
        return False

def get_video_duration(video_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –ø–æ–º–æ—â—å—é FFprobe."""
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
            '-of', 'default=noprint_wrappers=1:nokey=1', video_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return float(result.stdout.strip())
    except:
        return None

def parse_ffmpeg_time(line):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ FFmpeg –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
    # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ time=00:01:23.45
    time_match = re.search(r'time=(\d+):(\d+):(\d+)\.(\d+)', line)
    if time_match:
        hours = int(time_match.group(1))
        minutes = int(time_match.group(2))
        seconds = int(time_match.group(3))
        centiseconds = int(time_match.group(4))
        return hours * 3600 + minutes * 60 + seconds + centiseconds / 100
    return None

def run_ffmpeg_with_prints(cmd, face_id, video_duration=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FFmpeg —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–Ω—Ç—ã."""
    print(f"\nüé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏—Ü–∞ {face_id}...")
    
    if video_duration:
        print(f"üìè –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {video_duration:.1f} —Å–µ–∫")
    
    try:
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
            bufsize=1
        )
        
        last_print_time = 0
        print_interval = 5  # –ü—Ä–∏–Ω—Ç–∏—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        while True:
            output = process.stderr.readline()
            if output == '' and process.poll() is not None:
                break
            
            if output:
                current_time = parse_ffmpeg_time(output)
                if current_time and video_duration:
                    # –ü—Ä–∏–Ω—Ç–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    if current_time - last_print_time >= print_interval or current_time == video_duration:
                        progress_percent = (current_time / video_duration) * 100
                        print(f"‚è≥ –õ–∏—Ü–æ {face_id}: {current_time:.1f}/{video_duration:.1f} —Å–µ–∫ ({progress_percent:.1f}%)")
                        last_print_time = current_time
        
        process.wait()
        
        if process.returncode == 0:
            print(f"‚úÖ –õ–∏—Ü–æ {face_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            return True, None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Ü–∞ {face_id}")
            return False, "FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π"
            
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ª–∏—Ü–∞ {face_id}: {e}")
        return False, str(e)

def split_video_by_face_ffmpeg(
    video_path: str,
    haar_cascade_path: str,
    output_dir: str,
    padding_factor: float = 1.8,
    target_aspect_ratio: float = 9.0 / 16.0,
    output_width: int = 720,
    output_height: int = 1280,
    initial_detection_frames: int = 10,
    offset_x: list = None,  # üî• –ù–û–í–û–ï: –û—Ñ—Å–µ—Ç—ã –ø–æ X –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–∞ [x1, x2, ...]
    offset_y: list = None   # üî• –ù–û–í–û–ï: –û—Ñ—Å–µ—Ç—ã –ø–æ Y –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–∞ [y1, y2, ...]
):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ª–∏—Ü–∞ –≤ –Ω–∞—á–∞–ª–µ –≤–∏–¥–µ–æ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FFmpeg –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–∞.
    
    Args:
        video_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
        haar_cascade_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞—Å–∫–∞–¥–∞ –•–∞–∞—Ä–∞ (.xml).
        output_dir (str): –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤—ã—Ö –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤.
        padding_factor (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç—Å—Ç—É–ø–∞ –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞ (1.0 = –Ω–µ—Ç –æ—Ç—Å—Ç—É–ø–∞).
        target_aspect_ratio (float): –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (—à–∏—Ä–∏–Ω–∞ / –≤—ã—Å–æ—Ç–∞).
        output_width (int): –®–∏—Ä–∏–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ.
        output_height (int): –í—ã—Å–æ—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ.
        initial_detection_frames (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ü.
        offset_x (list): –°–º–µ—â–µ–Ω–∏–µ –ø–æ X –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: [10, -20] –¥–ª—è 2 –ª–∏—Ü
        offset_y (list): –°–º–µ—â–µ–Ω–∏–µ –ø–æ Y –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: [5, -15] –¥–ª—è 2 –ª–∏—Ü
    """
    print("üöÄ --- –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ ---")
    start_total_time = time.time()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ñ—Å–µ—Ç—ã
    if offset_x is None:
        offset_x = []
    if offset_y is None:
        offset_y = []
    
    # 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFmpeg
    if not check_ffmpeg():
        return False, []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –≤—ã–≤–æ–¥–∞
    if not os.path.exists(video_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")
        return False, []
    
    if not os.path.exists(haar_cascade_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –∫–∞—Å–∫–∞–¥–∞ –•–∞–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {haar_cascade_path}")
        return False, []
    
    if not os.path.exists(output_dir):
        try:
            os.makedirs(output_dir)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –≤–∏–¥–µ–æ: {output_dir}")
        except OSError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {output_dir}: {e}")
            return False, []
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
    video_duration = get_video_duration(video_path)
    if video_duration:
        print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {video_duration:.2f} —Å–µ–∫—É–Ω–¥ ({video_duration/60:.1f} –º–∏–Ω—É—Ç)")
    
    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å–∫–∞–¥–∞ –•–∞–∞—Ä–∞
    face_cascade = cv2.CascadeClassifier(haar_cascade_path)
    if face_cascade.empty():
         print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å–∫–∞–¥ –•–∞–∞—Ä–∞ –∏–∑ {haar_cascade_path}")
         return False, []
    
    # 3. –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é OpenCV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {video_path}")
        return False, []
    
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = cap.get(cv2.CAP_PROP_FPS)
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: {video_path} ({frame_width}x{frame_height} @ {fps:.2f} FPS)")
    
    # 4. –ü–æ–∏—Å–∫ –ª–∏—Ü –≤ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–∞–¥—Ä–∞—Ö
    initial_faces_coords = []
    frames_processed_for_detection = 0
    print(f"üîç –ò—â—É –ª–∏—Ü–∞ –≤ –ø–µ—Ä–≤—ã—Ö {initial_detection_frames} –∫–∞–¥—Ä–∞—Ö...")
    
    for i in range(initial_detection_frames):
        ret, frame = cap.read()
        if not ret:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í–∏–¥–µ–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å —Ä–∞–Ω—å—à–µ, —á–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {initial_detection_frames} –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ü.")
            break
        
        frames_processed_for_detection += 1
        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray_frame, scaleFactor=1.1, minNeighbors=5, minSize=(50, 50))
        
        print(f"üì∑ –ö–∞–¥—Ä {i+1}: –Ω–∞–π–¥–µ–Ω–æ {len(faces)} –ª–∏—Ü")
        
        if len(faces) > 0:
            print(f"üéØ –ù–∞–π–¥–µ–Ω—ã –ª–∏—Ü–∞ ({len(faces)}) –≤ –∫–∞–¥—Ä–µ {i+1}. –ò—Å–ø–æ–ª—å–∑—É—é –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
            initial_faces_coords = faces.tolist()
            break
    
    if not initial_faces_coords:
        print(f"‚ùå –û—à–∏–±–∫–∞: –õ–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–≤—ã—Ö {frames_processed_for_detection} –∫–∞–¥—Ä–∞—Ö.")
        cap.release()
        return False, []
    
    cap.release()
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞–¥—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω, OpenCV —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.")
    
    # 5. –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ—Ñ—Å–µ—Ç–æ–≤
    crop_regions = []
    print("üìê –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –æ–±–ª–∞—Å—Ç–∏ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    if offset_x or offset_y:
        print(f"üéØ –ü—Ä–∏–º–µ–Ω—è—é –æ—Ñ—Å–µ—Ç—ã: X={offset_x}, Y={offset_y}")
    
    for i, (x, y, w, h) in enumerate(initial_faces_coords):
        # üî• –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ñ—Å–µ—Ç—ã
        face_offset_x = offset_x[i] if i < len(offset_x) else 0
        face_offset_y = offset_y[i] if i < len(offset_y) else 0
        
        print(f"üë§ –õ–∏—Ü–æ {i+1}: –±–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x={x}, y={y}, w={w}, h={h})")
        if face_offset_x != 0 or face_offset_y != 0:
            print(f"   üéØ –ü—Ä–∏–º–µ–Ω—è—é –æ—Ñ—Å–µ—Ç: X+{face_offset_x}, Y+{face_offset_y}")
        
        center_x = x + w / 2 + face_offset_x  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ—Å–µ—Ç –∫ —Ü–µ–Ω—Ç—Ä—É
        center_y = y + h / 2 + face_offset_y  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ—Å–µ—Ç –∫ —Ü–µ–Ω—Ç—Ä—É
        
        base_dimension = max(w, h) * padding_factor
        
        if target_aspect_ratio > 1:
            crop_w = int(base_dimension)
            crop_h = int(base_dimension / target_aspect_ratio)
        elif target_aspect_ratio < 1:
             crop_h = int(base_dimension)
             crop_w = int(base_dimension * target_aspect_ratio)
        else:
            crop_w = int(base_dimension)
            crop_h = int(base_dimension)

        crop_x = int(center_x - crop_w / 2)
        crop_y = int(center_y - crop_h / 2)
        
        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–¥—Ä–∞
        crop_x = max(0, crop_x)
        crop_y = max(0, crop_y)
        
        if crop_x + crop_w > frame_width:
            crop_w = frame_width - crop_x
            new_h = int(crop_w / target_aspect_ratio)
            crop_h = new_h
            crop_y = max(0, int(center_y - crop_h / 2))
            
        if crop_y + crop_h > frame_height:
            crop_h = frame_height - crop_y
            new_w = int(crop_h * target_aspect_ratio)
            crop_w = new_w
            crop_x = max(0, int(center_x - crop_w / 2))

        crop_w = max(1, min(crop_w, frame_width - crop_x))
        crop_h = max(1, min(crop_h, frame_height - crop_y))
        
        if crop_w <= 1 or crop_h <= 1:
             print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ª–∏—Ü–∞ {i+1}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
             continue
             
        crop_regions.append({
            'id': i + 1,
            'crop_x': crop_x,
            'crop_y': crop_y,
            'crop_w': crop_w,
            'crop_h': crop_h,
            'offset_x': face_offset_x,
            'offset_y': face_offset_y
        })
        
        print(f"   ‚úì –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: crop(x={crop_x}, y={crop_y}, w={crop_w}, h={crop_h})")
    
    if not crop_regions:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return False, []
    
    # 6. –ó–∞–ø—É—Å–∫ FFmpeg –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    output_files = []
    total_regions = len(crop_regions)
    
    print(f"\nüé• –ù–∞—á–∏–Ω–∞—é –Ω–∞—Ä–µ–∑–∫—É {total_regions} –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg...")
    print("=" * 60)
    
    for idx, region in enumerate(crop_regions, 1):
        face_id = region['id']
        cx, cy, cw, ch = region['crop_x'], region['crop_y'], region['crop_w'], region['crop_h']
        offset_info = f" (–æ—Ñ—Å–µ—Ç: X{region['offset_x']:+d}, Y{region['offset_y']:+d})" if region['offset_x'] != 0 or region['offset_y'] != 0 else ""
        
        output_filename = os.path.join(output_dir, f"face_{face_id}_output.mp4")
        
        print(f"\n[{idx}/{total_regions}] üé¨ –õ–∏—Ü–æ {face_id}{offset_info}")
        print(f"üìè –û–±–ª–∞—Å—Ç—å –∫—Ä–æ–ø–∞: {cw}x{ch} –≤ –ø–æ–∑–∏—Ü–∏–∏ ({cx}, {cy})")
        print(f"üéØ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_filename}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg
        ffmpeg_command = [
            'ffmpeg',
            '-i', video_path,
            '-vf', f'crop={cw}:{ch}:{cx}:{cy},scale={output_width}:{output_height}',
            '-c:a', 'copy',
            '-c:v', 'libx264',
            '-preset', 'veryfast',
            '-crf', '23',
            '-y',
            output_filename
        ]
        
        start_ffmpeg_time = time.time()
        success, error = run_ffmpeg_with_prints(ffmpeg_command, face_id, video_duration)
        end_ffmpeg_time = time.time()
        
        if success:
            output_files.append(output_filename)
            processing_time = end_ffmpeg_time - start_ffmpeg_time
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if os.path.exists(output_filename):
                file_size_mb = os.path.getsize(output_filename) / (1024 * 1024)
                print(f"üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} –ú–ë")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Ü–∞ {face_id}")
            if error:
                print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error}")
    
    # 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    end_total_time = time.time()
    print("\n" + "=" * 60)
    
    if len(output_files) == len(crop_regions):
        print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        success = True
    elif len(output_files) > 0:
        print(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(output_files)}/{len(crop_regions)} –≤–∏–¥–µ–æ.")
        success = True
    else:
        print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.")
        success = False
    
    print(f"üìÇ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    print(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for i, file in enumerate(output_files, 1):
        print(f"   {i}. {os.path.basename(file)}")
    
    total_time_minutes = (end_total_time - start_total_time) / 60
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {end_total_time - start_total_time:.2f} —Å–µ–∫ ({total_time_minutes:.1f} –º–∏–Ω)")
    
    return success, output_files

# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---
if __name__ == "__main__":
    # --- –ù–ê–°–¢–†–û–ô–ö–ò –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ ---
    INPUT_VIDEO = 'test.mp4'
    HAAR_CASCADE_FILE = 'haarcascade_frontalface_default.xml'
    OUTPUT_FOLDER = 'split_static_ffmpeg_9_16'
    PADDING = 1.8
    ASPECT_RATIO = 9.0 / 16.0
    OUT_WIDTH = 720
    OUT_HEIGHT = 1280
    DETECT_FRAMES = 30
    
    # üî• –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –û–§–°–ï–¢–û–í:
    # –ï—Å–ª–∏ —É —Ç–µ–±—è 2 –ª–∏—Ü–∞ –∏ —Ö–æ—á–µ—à—å —Å–º–µ—Å—Ç–∏—Ç—å:
    # - –ü–µ—Ä–≤–æ–µ –ª–∏—Ü–æ –Ω–∞ 50 –ø–∏–∫—Å–µ–ª–µ–π –≤–ø—Ä–∞–≤–æ –∏ 20 –≤–≤–µ—Ä—Ö
    # - –í—Ç–æ—Ä–æ–µ –ª–∏—Ü–æ –Ω–∞ 30 –≤–ª–µ–≤–æ –∏ 10 –≤–Ω–∏–∑
    OFFSETS_X = [50, -30]  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –≤–ø—Ä–∞–≤–æ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = –≤–ª–µ–≤–æ
    OFFSETS_Y = [-20, 10]  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –≤–Ω–∏–∑, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = –≤–≤–µ—Ä—Ö
    
    # –ò–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –æ—Ñ—Å–µ—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã:
    # OFFSETS_X = []
    # OFFSETS_Y = []
    
    if not os.path.exists(INPUT_VIDEO):
        print(f"‚ùå –§–∞–π–ª –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω: {INPUT_VIDEO}")
    elif not os.path.exists(HAAR_CASCADE_FILE):
         print(f"‚ùå –§–∞–π–ª –∫–∞—Å–∫–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {HAAR_CASCADE_FILE}")
    else:
        print("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ñ—Å–µ—Ç–æ–≤:")
        print(f"   X –æ—Ñ—Å–µ—Ç—ã: {OFFSETS_X}")
        print(f"   Y –æ—Ñ—Å–µ—Ç—ã: {OFFSETS_Y}")
        print()
        
        # –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        success, created_files = split_video_by_face_ffmpeg(
            video_path=INPUT_VIDEO,
            haar_cascade_path=HAAR_CASCADE_FILE,
            output_dir=OUTPUT_FOLDER,
            padding_factor=PADDING,
            target_aspect_ratio=ASPECT_RATIO,
            output_width=OUT_WIDTH,
            output_height=OUT_HEIGHT,
            initial_detection_frames=DETECT_FRAMES,
            offset_x=OFFSETS_X,  # üî• –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            offset_y=OFFSETS_Y   # üî• –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        )
        
        if success:
            print("\nüéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\nüí• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.")